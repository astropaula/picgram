{"version":3,"sources":["comps/Title.js","firebase/config.js","hooks/useStorage.js","comps/ProgressBar.js","comps/UploadForm.js","hooks/useFirestore.js","comps/ImageGrid.js","comps/Modal.js","App.js","index.js"],"names":["Title","className","firebase","apiKey","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","appId","projectStorage","projectFirestore","timestamp","FieldValue","serverTimestamp","useStorage","file","useState","progress","setProgress","error","setError","url","setUrl","useEffect","storageRef","ref","name","collectionRef","collection","put","on","snap","percentage","bytesTransferred","totalBytes","err","a","getDownloadURL","createdAt","console","log","add","ProgressBar","setFile","div","initial","width","animate","UploadForm","types","type","onChange","e","selected","target","files","includes","useFirestore","docs","setDocs","unsub","orderBy","onSnapshot","documents","forEach","doc","push","data","id","ImageGrid","setSelectedImg","map","key","layout","whileHover","opacity","onClick","img","src","alt","transition","delay","Modal","selectedImage","classList","contains","scale","App","React","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"uNAaeA,EAXD,WACZ,OACE,yBAAKC,UAAU,SACb,uCACA,6CACA,0GACA,uBAAGA,UAAU,YAAb,6C,2CCQNC,gBAVqB,CACjBC,OAAQ,0CACRC,WAAY,gCACZC,YAAa,uCACbC,UAAW,gBACXC,cAAe,4BACfC,kBAAmB,eACnBC,MAAO,8CAMX,IAAMC,EAAiBR,YACjBS,EAAmBT,cACnBU,EAAYV,YAAmBW,WAAWC,gBCejCC,EA/BI,SAACC,GAAU,IAAD,EACOC,mBAAS,GADhB,mBAClBC,EADkB,KACRC,EADQ,OAECF,mBAAS,MAFV,mBAElBG,EAFkB,KAEXC,EAFW,OAGHJ,mBAAS,MAHN,mBAGlBK,EAHkB,KAGbC,EAHa,KA4BzB,OAvBAC,qBAAU,WAGN,IAAMC,EAAaf,EAAegB,IAAIV,EAAKW,MACrCC,EAAgBjB,EAAiBkB,WAAW,UAGlDJ,EAAWK,IAAId,GAAMe,GAAG,iBAAiB,SAACC,GACtC,IAAIC,EAAcD,EAAKE,iBAAmBF,EAAKG,WAAc,IAC7DhB,EAAYc,MACb,SAACG,GACAf,EAASe,KAJb,sBAKG,8BAAAC,EAAA,sEACmBZ,EAAWa,iBAD9B,cACOhB,EADP,OAEOiB,EAAY3B,IAClB4B,QAAQC,IAAIF,GAHb,SAKOX,EAAcc,IAAI,CAAEpB,MAAKiB,cALhC,OAMChB,EAAOD,GANR,8CASJ,CAACN,IAEG,CAAEE,WAAUI,MAAKF,U,OCbbuB,EAhBK,SAAC,GAAuB,IAArB3B,EAAoB,EAApBA,KAAM4B,EAAc,EAAdA,QAAc,EACb7B,EAAWC,GAA7BM,EAD+B,EAC/BA,IAAKJ,EAD0B,EAC1BA,SAOb,OALAM,qBAAU,WACFF,GACAsB,EAAQ,QAEb,CAACtB,EAAKsB,IAEL,kBAAC,IAAOC,IAAR,CAAY5C,UAAU,eAClB6C,QAAS,CAAEC,MAAO,GAClBC,QAAS,CAAED,MAAO7B,EAAW,QC4B1B+B,EAvCI,WAAO,IAAD,EACGhC,mBAAS,MADZ,mBACdD,EADc,KACR4B,EADQ,OAEK3B,mBAAS,MAFd,mBAEdG,EAFc,KAEPC,EAFO,KAIf6B,EAAQ,CAAC,YAAa,cAoB5B,OACI,8BACI,+BACI,2BAAOC,KAAK,OAAOC,SApBT,SAACC,GAEnB,IAAIC,EAAWD,EAAEE,OAAOC,MAAM,GAC9BhB,QAAQC,IAAIa,GAGRA,GAAYJ,EAAMO,SAASH,EAASH,OACpCP,EAAQU,GACRjC,EAAS,MAGTuB,EAAQ,MACRvB,EAAS,iDASL,oCAEJ,yBAAKpB,UAAU,UACVmB,GAAS,yBAAKnB,UAAU,SAAf,IAAyBmB,GAClCJ,GAAQ,6BAAMA,EAAKW,MACnBX,GAAQ,kBAAC,EAAD,CAAaA,KAAMA,EAAM4B,QAASA,O,OCX5Cc,EAvBM,SAAC7B,GAAgB,IAAD,EACTZ,mBAAS,IADA,mBAC1B0C,EAD0B,KACpBC,EADoB,KAoBjC,OAhBApC,qBAAU,WAEN,IAAMqC,EAAQlD,EAAiBkB,WAAWA,GACrCiC,QAAQ,YAAa,QAAQC,YAAW,SAAC/B,GAEtC,IAAIgC,EAAY,GAChBhC,EAAKiC,SAAQ,SAAAC,GACTF,EAAUG,KAAV,2BAAoBD,EAAIE,QAAxB,IAAgCC,GAAIH,EAAIG,SAE5CT,EAAQI,MAIhB,OAAO,kBAAMH,OACd,CAAChC,IAEG,CAAE8B,SCIEW,EAvBG,SAAC,GAAwB,IAAtBC,EAAqB,EAArBA,eACTZ,EAASD,EAAa,UAAtBC,KAGR,OAFAnB,QAAQC,IAAIkB,GAGR,yBAAK1D,UAAU,YACV0D,GAAQA,EAAKa,KAAI,SAAAN,GAAG,OACjB,kBAAC,IAAOrB,IAAR,CAAY5C,UAAU,WAAWwE,IAAKP,EAAIG,GACtCK,QAAM,EACNC,WAAY,CAAEC,QAAS,GACvBC,QAAS,kBAAMN,EAAeL,EAAI5C,OAElC,kBAAC,IAAOwD,IAAR,CAAYC,IAAKb,EAAI5C,IAAK0D,IAAI,eAC1BlC,QAAS,CAAE8B,QAAS,GACpB5B,QAAS,CAAE4B,QAAS,GACpBK,WAAY,CAAEC,MAAO,YCK9BC,EArBD,SAAC,GAAuC,IAArCC,EAAoC,EAApCA,cAAeb,EAAqB,EAArBA,eAQ5B,OACI,kBAAE,IAAO1B,IAAT,CAAa5C,UAAU,WAAW4E,QARlB,SAACxB,GACbA,EAAEE,OAAO8B,UAAUC,SAAS,aAC5Bf,EAAe,OAOfzB,QAAS,CAAE8B,QAAS,GACpB5B,QAAS,CAAE4B,QAAS,IAEpB,kBAAC,IAAOE,IAAR,CAAYC,IAAKK,EAAeJ,IAAI,eAChClC,QAAS,CAAEyC,MAAO,GAClBvC,QAAS,CAAEuC,MAAO,GAClBN,WAAY,CAAEC,MAAO,QCAtBM,MAbf,WAAgB,IAAD,EAC2BC,IAAMxE,SAAS,MAD1C,mBACNmE,EADM,KACSb,EADT,KAGb,OACE,yBAAKtE,UAAU,OACb,kBAAC,EAAD,MACA,kBAAC,EAAD,MACA,kBAAC,EAAD,CAAWsE,eAAgBA,IAC1Ba,GAAiB,kBAAC,EAAD,CAAOA,cAAeA,EAAeb,eAAgBA,MCT7EmB,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,W","file":"static/js/main.de3a38e2.chunk.js","sourcesContent":["import React from 'react';\n\nconst Title = () => {\n  return (\n    <div className=\"title\">\n      <h1>PicGram</h1>\n      <h2>Your Pictures</h2>\n      <p>Create your personal photo journal below to keep beautiful moments in mind!</p>\n      <p className=\"subtitle\">Have access to them, whereever You are!</p>\n    </div>\n  )\n}\n\nexport default Title;","import * as firebase from 'firebase/app';\r\nimport 'firebase/storage';\r\nimport 'firebase/firestore';\r\n\r\n\r\n// Your web app's Firebase configuration\r\nvar firebaseConfig = {\r\n    apiKey: \"AIzaSyAT9kbygZME7mtXi_kXCE0EdwHjbzd-a6w\",\r\n    authDomain: \"paula-picgram.firebaseapp.com\",\r\n    databaseURL: \"https://paula-picgram.firebaseio.com\",\r\n    projectId: \"paula-picgram\",\r\n    storageBucket: \"paula-picgram.appspot.com\",\r\n    messagingSenderId: \"692695587351\",\r\n    appId: \"1:692695587351:web:83698f117df2dfc8485a52\"\r\n};\r\n// Initialize Firebase\r\nfirebase.initializeApp(firebaseConfig);\r\n\r\n//Initialize storage servis upload time to sort images\r\nconst projectStorage = firebase.storage();\r\nconst projectFirestore = firebase.firestore();\r\nconst timestamp = firebase.firestore.FieldValue.serverTimestamp; //Special type of data: timestamp used by firebase.\r\n\r\nexport { projectStorage, projectFirestore, timestamp };","import { useState, useEffect } from 'react';\r\nimport { projectStorage, projectFirestore, timestamp } from '../firebase/config';\r\n\r\n// Keep firebase logic outside the components (UploadForm)\r\n\r\nconst useStorage = (file) => {\r\n    const [progress, setProgress] = useState(0);\r\n    const [error, setError] = useState(null);\r\n    const [url, setUrl] = useState(null);\r\n\r\n    useEffect(() => {\r\n        // reference to the file inside default firebase storage - when file will be uploaded it should have that name\r\n        //where file should be saved\r\n        const storageRef = projectStorage.ref(file.name);\r\n        const collectionRef = projectFirestore.collection('images');\r\n\r\n        // Uploading file to the reference. Asynchronous, attached event listner - when file changes, snap function starts.\r\n        storageRef.put(file).on('state_changed', (snap) => {\r\n            let percentage = (snap.bytesTransferred / snap.totalBytes) * 100;\r\n            setProgress(percentage);\r\n        }, (err) => {\r\n            setError(err);\r\n        }, async () => {\r\n            const url = await storageRef.getDownloadURL();\r\n            const createdAt = timestamp();\r\n            console.log(createdAt);\r\n            // Add new document.\r\n            await collectionRef.add({ url, createdAt });\r\n            setUrl(url);\r\n        });\r\n\r\n    }, [file]); //useEffect is on when changes in file happens\r\n\r\n    return { progress, url, error }\r\n}\r\n\r\nexport default useStorage;","import React, { useEffect } from 'react';\r\nimport useStorage from '../hooks/useStorage';\r\nimport { motion } from 'framer-motion';\r\n\r\nconst ProgressBar = ({ file, setFile }) => {\r\n    const { url, progress } = useStorage(file);\r\n\r\n    useEffect(() => {\r\n        if (url) {\r\n            setFile(null);\r\n        }\r\n    }, [url, setFile])\r\n    return (\r\n        <motion.div className=\"progress-bar\"\r\n            initial={{ width: 0 }}\r\n            animate={{ width: progress + '%' }}\r\n        ></motion.div>\r\n    )\r\n}\r\n\r\nexport default ProgressBar;","import React, { useState } from 'react';\r\nimport ProgressBar from './ProgressBar';\r\n\r\n\r\nconst UploadForm = () => {\r\n    const [file, setFile] = useState(null);\r\n    const [error, setError] = useState(null);\r\n\r\n    const types = ['image/png', 'image/jpeg'];\r\n\r\n    // Function which handle the event\r\n    const changeHandler = (e) => {\r\n        // Grab first selected file\r\n        let selected = e.target.files[0];\r\n        console.log(selected); //Check action\r\n\r\n        // Check the presence and type of the file\r\n        if (selected && types.includes(selected.type)) {\r\n            setFile(selected);\r\n            setError('');\r\n        } else {\r\n            // Reset\r\n            setFile(null);\r\n            setError('Please select an image file (png or jpeg)');\r\n\r\n        }\r\n    }\r\n\r\n    return (\r\n        <form>\r\n            <label>\r\n                <input type=\"file\" onChange={changeHandler} />\r\n                <span>+</span>\r\n            </label>\r\n            <div className=\"output\">\r\n                {error && <div className=\"error\"> {error}</div>}\r\n                {file && <div>{file.name}</div>}\r\n                {file && <ProgressBar file={file} setFile={setFile} />}\r\n            </div>\r\n        </form>\r\n    )\r\n}\r\n\r\nexport default UploadForm;","import { useState, useEffect } from 'react';\r\nimport { projectFirestore } from '../firebase/config';\r\n\r\nconst useFirestore = (collection) => {\r\n    const [docs, setDocs] = useState([]);\r\n\r\n    // Communicate with database\r\n    useEffect(() => {\r\n        // Returns a function\r\n        const unsub = projectFirestore.collection(collection)\r\n            .orderBy('createdAt', 'desc').onSnapshot((snap) => {\r\n                // Retrieving documents\r\n                let documents = [];\r\n                snap.forEach(doc => {\r\n                    documents.push({ ...doc.data(), id: doc.id })\r\n                });\r\n                setDocs(documents);\r\n            })\r\n\r\n        // Cleanup function - get rid of the collection.\r\n        return () => unsub();\r\n    }, [collection])\r\n\r\n    return { docs };\r\n}\r\n\r\nexport default useFirestore;","import React from 'react';\r\nimport useFirestore from '../hooks/useFirestore';\r\nimport { motion } from 'framer-motion';\r\n\r\nconst ImageGrid = ({ setSelectedImg }) => {\r\n    const { docs } = useFirestore('images');\r\n    console.log(docs);\r\n\r\n    return (\r\n        <div className=\"img-grid\">\r\n            {docs && docs.map(doc => (\r\n                <motion.div className=\"img-wrap\" key={doc.id}\r\n                    layout\r\n                    whileHover={{ opacity: 1 }}\r\n                    onClick={() => setSelectedImg(doc.url)}\r\n                >\r\n                    <motion.img src={doc.url} alt=\"uploaded pic\"\r\n                        initial={{ opacity: 0 }}\r\n                        animate={{ opacity: 1 }}\r\n                        transition={{ delay: 0.6 }}\r\n                    />\r\n                </motion.div>\r\n            ))}\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default ImageGrid;","import React from 'react';\r\nimport { motion } from 'framer-motion';\r\n\r\nconst Modal = ({ selectedImage, setSelectedImg }) => {\r\n    const handleClick = (e) => {\r\n        if (e.target.classList.contains('backdrop')) {\r\n            setSelectedImg(null);\r\n        }\r\n\r\n    }\r\n\r\n    return (\r\n        < motion.div className='backdrop' onClick={handleClick}\r\n            initial={{ opacity: 0 }}\r\n            animate={{ opacity: 1 }}\r\n        >\r\n            <motion.img src={selectedImage} alt=\"enlarged pic\"\r\n                initial={{ scale: 0 }}\r\n                animate={{ scale: 1 }}\r\n                transition={{ delay: 0.3 }} />\r\n        </motion.div >\r\n    )\r\n}\r\n\r\nexport default Modal;","import React from 'react';\nimport Title from './comps/Title';\nimport UploadForm from './comps/UploadForm';\nimport ImageGrid from './comps/ImageGrid';\nimport Modal from './comps/Modal';\n\nfunction App() {\n  const [selectedImage, setSelectedImg] = React.useState(null);\n\n  return (\n    <div className=\"App\">\n      <Title />\n      <UploadForm />\n      <ImageGrid setSelectedImg={setSelectedImg} />\n      {selectedImage && <Modal selectedImage={selectedImage} setSelectedImg={setSelectedImg} />}\n    </div>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n"],"sourceRoot":""}